name: CI

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request: {}

jobs:
  test-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - run: docker build . -t check-python-version

      - run: |
          mkdir foobar
          echo "VERSION = '1.0a1'" > foobar/version.py

      - run: >
          docker run --rm
          -e INPUT_TEST_GITHUB_REF
          -e INPUT_VERSION_FILE_PATH
          -e ALT_GITHUB_OUTPUT
          -v `pwd`:/app
          check-python-version
        env:
          # we can't use GITHUB_REF, so we use the backup var name
          INPUT_TEST_GITHUB_REF: refs/tags/v1.0.0a1
          INPUT_VERSION_FILE_PATH: foobar/version.py
          ALT_GITHUB_OUTPUT: /app/output1.txt

      - run: cat output1.txt
      - run: grep -q 'IS_PRERELEASE=true' output1.txt
      - run: grep -q 'VERSION="1.0a1"' output1.txt

      - run: echo "VERSION = '1.1.1'" > foobar/version.py
      - run: >
          docker run --rm
          -e INPUT_SKIP_ENV_CHECK
          -e INPUT_VERSION_FILE_PATH
          -e ALT_GITHUB_OUTPUT
          -v `pwd`:/app
          check-python-version
        env:
          INPUT_SKIP_ENV_CHECK: true
          INPUT_VERSION_FILE_PATH: foobar/version.py
          ALT_GITHUB_OUTPUT: /app/output2.txt

      - run: cat output2.txt
      - run: grep -q 'IS_PRERELEASE=false' output2.txt
      - run: grep -q 'VERSION="1.1.1"' output2.txt

  test-action:
    runs-on: ubuntu-latest
    steps:
      - run: |
          mkdir mypackage
          echo "__version__ = 'v1.0post1'" > mypackage/version.py

      - uses: samuelcolvin/check-python-version@main
        id: check-python-version
        with:
          version_file_path: mypackage/version.py
          test_github_ref: refs/tags/1-post1

      - run: test ${{ steps.check-python-version.outputs.IS_PRERELEASE }} == 'false'
      - run: test ${{ steps.check-python-version.outputs.VERSION }} == '1.0.post1'
